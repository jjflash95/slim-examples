"
ASCII Snake game
"

LIMIT = 30

BLANK = 0
FOOD = 1
HEAD = 2
BODY = 3

fn main() {
    food = [rand(0, 9), rand(0, 9)]
    snake = [[rand(0, 9), rand(0, 9)]]

    return loop {
        render(snake, food)
        if snake[0][0] == food[0] && snake[0][1] == food[1] {
            food = [rand(0, 9), rand(0, 9)]
            snake = snake.move(true)
        } else {
            snake = snake.move(false)
        }

        if snake.won() {
            break "YOU WIN"
        } else if snake.lost() {
            break ("GAME OVER".push("\nSCORE: ").push(snake.len().to_string()))
        }
    }
}

impl int {
    fn to_char() {
        return if self == BLANK { ' ' }
            else if self == FOOD { '*' }
            else if self == HEAD { '@' }
            else if self == BODY { '#' }
    }
}

trait Number {
    fn to_string() {
        return to_string(self)
    }
}

trait GameState {
    fn set_food(food) {
        self[food[0]][food[1]] = FOOD
    }
    fn set_snake(snake) {
        for part in snake {
            self[part[0]][part[1]] = BODY
        }
        self[snake.head()[0]][snake.head()[1]] = HEAD
    }
    fn draw() {
        field = "------------\n"
        for row in self {
            field = field
                .push("|") 
                .push(row.map(fn (n) { return n.to_char() }).join('')) 
                .push("|\n")
        }
        return field.push("------------\n")
    }
}

impl str {
    fn push(other) {
        (*self) = concat(self, other)
        return self
    }
}

trait Array {
    fn slice(start, end) {
        return slice(self, start, end)
    }
    fn len() {
        return len(self)
    }
    fn extend(list) {
        for item in list {
            self[] = item
        }
        return self
    }
    fn pop() {
        return pop(self)
    }
    fn join(sep) {
        out = ""
        for i in self {
            out = out & concat(concat(sep, i))
        }
        return out
    }
    fn map(fn) {
        out = []
        for item in self {
            out[] = fn(item)
        }
        return out
    }
}

trait Snake {
    fn head() {
        return self[0]
    }
    fn tail() {
        return for part in self { part }
    }
    fn won() {
        return self.len() > LIMIT
    }
    fn lost() {
        if self.len() == 1 {
            return false
        }
    
        for part in self.slice(1, self.len()) {
            if self[0] == part { return true }
        }
        return false
    }
    fn get_head_pos(dir) {
        if lowercase(dir) == 'w' {
            x = self[0][0] - 1
            y = self[0][1]
    
        } else if lowercase(dir) == 'a' {
            x = self[0][0]
            y = self[0][1] - 1
    
        } else if lowercase(dir) == 'd' {
            x = self[0][0]
            y = self[0][1] + 1
    
        } else {
            x = self[0][0] + 1
            y = self[0][1]
        }
        if x > 9 {
            x = 0
        } else if y > 9 {
            y = 0
        } else if y < 0 {
            y = 9
        } else if x < 0 {
            x = 9
        }
        return [x, y]
    }

    fn move(add) {
        head = self.get_head_pos(input())
        tail = self.pop()
        _ = (*self) = [head].extend(self)
        if add {
            self[] = tail
        }
        return self
    }
}

impl Number 		for float
impl Number 		for int
impl Snake 			for sequence
impl Array 			for sequence
impl GameState 		for sequence

fn get_empty_state() {
    row = fn() {
        return [0,0,0,0,0,0,0,0,0,0]
    }
    out = []
    while len(out) < 10 {
        out[] = row()
    }
    return out
}

fn render(snake) {
    state = get_empty_state()
    state.set_food(food)
    state.set_snake(snake)
    clear()
    print(state.draw())
}

print(main())